# -*- coding: utf-8 -*-
"""
inject.py ‚Äî –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ JS-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ HTML-—Ñ–∞–π–ª—ã Detilda v4.9 unified
–ü—Ä–∞–≤–∏–ª–∞ –±–µ—Ä—É—Ç—Å—è –∏–∑ config/config.yaml ‚Üí service_files.html_inject_options
–∏ service_files.scripts_to_comment_out_tags.
"""

from __future__ import annotations

import os
import re
from pathlib import Path
from core import logger, config_loader, utils


def inject_scripts_and_handlers(project_root: str, script_dir: str | Path | None = None):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è JS-—Å–∫—Ä–∏–ø—Ç–æ–≤ –≤ HTML.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ config/config.yaml ‚Üí service_files.html_inject_options.
    """
    project_root = Path(project_root)

    cfg_service = config_loader.get_rules_service_files(script_dir)
    inject_opts = cfg_service.get("html_inject_options", {})
    scripts_to_comment = cfg_service.get("scripts_to_comment_out_tags", {}).get("filenames", [])

    inject_script_name = inject_opts.get("inject_handler_script", "form-handler.js")
    inject_after_marker = inject_opts.get("inject_after_marker", "</body>")

    logger.info("‚Üí –í–Ω–µ–¥—Ä–µ–Ω–∏–µ form-handler.js –∏ –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤...")

    processed = 0
    modified = 0

    for path in project_root.rglob("*.html"):
        try:
            content = utils.safe_read(path)
        except Exception as e:
            logger.warn(f"[inject] –ü—Ä–æ–ø—É—Å–∫ {path.name}: {e}")
            continue

        new_content = content

        # --- –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ç–∏–ª—å–¥–æ–≤—Å–∫–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ ---
        for bad_script in scripts_to_comment:
            pattern = rf'(<script[^>]+{re.escape(bad_script)}[^>]*><\/script>)'
            new_content = re.sub(pattern, r"<!-- \1 -->", new_content, flags=re.IGNORECASE)

        # --- –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–∞—à –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ---
        if inject_script_name not in new_content:
            inject_tag = f'\n<script src="js/{inject_script_name}"></script>\n'
            pattern_marker = re.compile(re.escape(inject_after_marker), re.IGNORECASE)
            if pattern_marker.search(new_content):
                new_content = pattern_marker.sub(inject_tag + inject_after_marker, new_content)
                logger.info(f"üß© –î–æ–±–∞–≤–ª–µ–Ω —Å–∫—Ä–∏–ø—Ç {inject_script_name} –≤ {path.name}")
                modified += 1
            else:
                # –µ—Å–ª–∏ </body> –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
                new_content += inject_tag
                logger.warn(f"[inject] –í {path.name} –Ω–µ –Ω–∞–π–¥–µ–Ω </body> ‚Äî —Å–∫—Ä–∏–ø—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–Ω–µ—Ü.")
                modified += 1

        # --- –î–æ–±–∞–≤–ª—è–µ–º AIDA forms (–µ—Å–ª–∏ –Ω–µ—Ç) ---
        if "aida-forms-1.0.min.js" not in new_content:
            new_content = new_content.replace(
                inject_after_marker,
                f'\n<script src="js/aida-forms-1.0.min.js"></script>\n{inject_after_marker}',
            )
            logger.info(f"üß© –î–æ–±–∞–≤–ª–µ–Ω AIDA forms –≤ {path.name}")
            modified += 1

        # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å ---
        if new_content != content:
            utils.safe_write(path, new_content)
            processed += 1

    logger.info(f"‚úì –í–Ω–µ–¥—Ä–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ò–∑–º–µ–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {processed}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Å—Ç–∞–≤–æ–∫: {modified}")


# === –ü—Ä—è–º–∞—è –æ—Ç–ª–∞–¥–∫–∞ ===
if __name__ == "__main__":
    test_project = "./_workdir/project5059034"
    test_script_dir = "."
    try:
        inject_scripts_and_handlers(test_project, test_script_dir)
    except Exception as e:
        logger.err(f"üí• –û—à–∏–±–∫–∞ –≤ inject.py: {e}")