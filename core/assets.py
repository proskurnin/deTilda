# -*- coding: utf-8 -*-
"""
assets.py ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Å—Å–µ—Ç–æ–≤ Detilda v4.9 unified
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–¥–∏–Ω—ã–π config/config.yaml:
 - patterns.assets.til_to_ai_filename ‚Äî —Ä–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è til* ‚Üí ai*
 - images.delete_physical_files ‚Äî —Å–ø–∏—Å–∫–∏ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
 - service_files.exclude_from_rename ‚Äî –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
–¢–∞–∫–∂–µ —Å–æ–∑–¥–∞—ë—Ç –≤–∞–ª–∏–¥–Ω—ã–π images/1px.png (1√ó1 –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π).
"""

import re
from pathlib import Path
from core import logger, config_loader
from core.utils import file_exists

# –ì–¥–µ –∏—â–µ–º –∞—Å—Å–µ—Ç—ã (–¥–µ—Ä–µ–≤—å—è —Å –º–µ–¥–∏–∞)
_ASSET_DIRS = ("images", "img", "files", "media")
# –ì–¥–µ –æ–±—ã—á–Ω–æ –ª–µ–∂–∞—Ç —Å—Ç–∏–ª–∏/—Å–∫—Ä–∏–ø—Ç—ã
_CODE_DIRS = ("css", "js")

# –í–∞–ª–∏–¥–Ω—ã–π 1√ó1 PNG (–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π)
_ONEPX_PNG = (
    b"\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x01\x00\x00\x00\x01"
    b"\x08\x06\x00\x00\x00\x1f\x15\xc4\x89\x00\x00\x00\x0cIDATx\x9cc``\x00\x00"
    b"\x00\x02\x00\x01\xe2!\xbc3\x00\x00\x00\x00IEND\xaeB`\x82"
)

def _project_base_dir(project_root: Path) -> Path:
    return project_root.parent.parent if project_root.parent.name == "_workdir" else project_root.parent

def _load_configs(project_root: Path) -> tuple[dict, dict, dict]:
    base_dir = _project_base_dir(project_root)
    patterns = config_loader.get_patterns_config(base_dir)
    rules_images = config_loader.get_rules_images(base_dir)
    rules_service = config_loader.get_rules_service_files(base_dir)
    return patterns, rules_images, rules_service

def _compile_til_to_ai_regex(patterns: dict) -> re.Pattern:
    # –í YAML: assets.til_to_ai_filename, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é \btil
    p = None
    try:
        p = patterns.get("assets", {}).get("til_to_ai_filename", r"\btil")
    except Exception:
        p = r"\btil"
    return re.compile(p, re.IGNORECASE)

def _excluded_from_rename(rules_service: dict) -> set[str]:
    try:
        items = rules_service.get("exclude_from_rename", {}).get("files", []) or []
        return {s.lower() for s in items}
    except Exception:
        return set()

def _delete_lists(rules_images: dict) -> tuple[set[str], set[str]]:
    try:
        after_rename = set((rules_images.get("delete_physical_files", {}).get("after_rename", []) or []))
        as_is = set((rules_images.get("delete_physical_files", {}).get("as_is", []) or []))
        return {s.lower() for s in after_rename}, {s.lower() for s in as_is}
    except Exception:
        return set(), set()

def _sanitize_filename(name: str) -> str:
    out = (name.replace(" ", "_")
               .replace("(", "")
               .replace(")", "")
               .replace(",", "")
               .replace("&", "and"))
    out = re.sub(r"_+", "_", out)
    return out

def _iter_candidate_files(project_root: Path):
    """
    –ò—Ç–µ—Ä–∞—Ç–æ—Ä –ø–æ —Ñ–∞–π–ª–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è:
    - –≤—Å—ë –≤ –ø–∞–ø–∫–∞—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π/—Ñ–∞–π–ª–æ–≤
    - –≤—Å–µ *.css –∏ *.js –≤ –ø—Ä–æ–µ–∫—Ç–µ (–≤–∫–ª—é—á–∞—è /css –∏ /js)
    """
    root = Path(project_root)
    yielded = set()

    # –ú–µ–¥–∏–∞-–ø–∞–ø–∫–∏
    for d in _ASSET_DIRS:
        base = root / d
        if base.exists():
            for p in base.rglob("*.*"):
                if p.is_file():
                    rp = p.resolve()
                    if rp not in yielded:
                        yielded.add(rp)
                        yield p

    # –í—Å–µ CSS/JS –ø–æ –≤—Å–µ–º—É –ø—Ä–æ–µ–∫—Ç—É
    for pattern in ("*.css", "*.js"):
        for p in root.rglob(pattern):
            if p.is_file():
                rp = p.resolve()
                if rp not in yielded:
                    yielded.add(rp)
                    yield p

def rename_and_cleanup_assets(project_root: Path, stats: dict):
    """
    –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –∞—Å—Å–µ—Ç—ã –ø–æ –ø—Ä–∞–≤–∏–ª—É til* ‚Üí ai*, —É—á–∏—Ç—ã–≤–∞—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏ —Å–ø–∏—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è.
    –¢–∞–∫–∂–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç *.css –∏ *.js —Ñ–∞–π–ª—ã (–∏–º–µ–Ω–Ω–æ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤), –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç rename_map.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      rename_map ‚Äî {—Å—Ç–∞—Ä—ã–π_–æ—Ç–Ω–æ—Å–∏—Ç_–ø—É—Ç—å: –Ω–æ–≤—ã–π_–æ—Ç–Ω–æ—Å–∏—Ç_–ø—É—Ç—å}
      stats ‚Äî {"renamed": int, "removed": int}
    """
    patterns, rules_images, rules_service = _load_configs(project_root)
    til_to_ai_rx = _compile_til_to_ai_regex(patterns)
    exclude = _excluded_from_rename(rules_service)
    del_after_rename, del_as_is = _delete_lists(rules_images)

    rename_map: dict[str, str] = {}
    renamed_count = 0
    removed_count = 0

    root = Path(project_root)

    for path in _iter_candidate_files(root):
        rel_old = str(path.relative_to(root)).replace("\\", "/")
        name_lower = path.name.lower()

        # 0) –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ "–∫–∞–∫ –µ—Å—Ç—å"
        if name_lower in del_as_is:
            try:
                path.unlink()
                removed_count += 1
                logger.info(f"üóë –£–¥–∞–ª—ë–Ω (as_is): {path.name}")
            except Exception as e:
                logger.err(f"[assets] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {path}: {e}")
            continue

        # 1) –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
        if name_lower in exclude:
            continue

        # 2) –ø—Ä–∏–º–µ–Ω—è–µ–º til* ‚Üí ai* –Ω–∞ –ò–ú–ï–ù–ò —Ñ–∞–π–ª–∞
        stem, ext = path.stem, path.suffix
        new_stem = til_to_ai_rx.sub("ai", stem, count=1)  # —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –ø—Ä–µ—Ñ–∏–∫—Å
        new_name = _sanitize_filename(new_stem + ext)

        if new_name != path.name:
            new_path = path.with_name(new_name)
            try:
                path.rename(new_path)
                renamed_count += 1
                rel_new = str(new_path.relative_to(root)).replace("\\", "/")
                rename_map[rel_old] = rel_new
                logger.info(f"üîÑ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: {path.name} ‚Üí {new_name}")
                path = new_path
                name_lower = new_name.lower()
                rel_old = rel_new
            except Exception as e:
                logger.err(f"[assets] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è {path}: {e}")

        # 3) —É–¥–∞–ª–µ–Ω–∏–µ ¬´–ø–æ—Å–ª–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è¬ª
        if name_lower in del_after_rename:
            try:
                path.unlink()
                removed_count += 1
                logger.info(f"üóë –£–¥–∞–ª—ë–Ω (after_rename): {path.name}")
            except Exception as e:
                logger.err(f"[assets] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {path}: {e}")
            continue

    # 4) placeholder 1px.png
    placeholder = root / "images" / "1px.png"
    if not file_exists(placeholder):
        try:
            placeholder.parent.mkdir(parents=True, exist_ok=True)
            with open(placeholder, "wb") as f:
                f.write(_ONEPX_PNG)
            logger.info(f"üß© –î–æ–±–∞–≤–ª–µ–Ω placeholder: {placeholder}")
        except Exception as e:
            logger.err(f"[assets] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ placeholder: {e}")

    stats["renamed"] = renamed_count
    stats["removed"] = removed_count
    logger.info(f"üì¶ –ê—Å—Å–µ—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã: –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ {renamed_count}, —É–¥–∞–ª–µ–Ω–æ {removed_count}")
    return rename_map, stats