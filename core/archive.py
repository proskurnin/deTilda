# -*- coding: utf-8 -*-
"""
archive.py ‚Äî –º–æ–¥—É–ª—å —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ –∞—Ä—Ö–∏–≤–∞ Detilda v4.2 LTS
–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ä–∞—Å–ø–∞–∫–æ–≤–∫—É .zip –≤ _workdir –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞.
"""

import os
import zipfile
import shutil
from core import logger


def unzip_archive(archive_path: str, workdir: str) -> str:
    """
    –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç –∞—Ä—Ö–∏–≤ .zip –≤ —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞.
    –ï—Å–ª–∏ –≤–Ω—É—Ç—Ä–∏ –∞—Ä—Ö–∏–≤–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ ‚Äî –∏–∑–≤–ª–µ–∫–∞–µ—Ç –µ—ë —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∫ –µ—Å—Ç—å.
    """
    if not os.path.exists(archive_path):
        raise FileNotFoundError(f"–ê—Ä—Ö–∏–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {archive_path}")

    extract_dir = os.path.join(workdir, "_unzipped_tmp")
    if os.path.exists(extract_dir):
        shutil.rmtree(extract_dir)
    os.makedirs(extract_dir, exist_ok=True)

    logger.info(f"‚Üí –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞: {os.path.basename(archive_path)}")

    try:
        with zipfile.ZipFile(archive_path, "r") as zip_ref:
            zip_ref.extractall(extract_dir)
    except zipfile.BadZipFile:
        raise RuntimeError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ZIP-–∞—Ä—Ö–∏–≤: {archive_path}")

    # –ù–∞–π–¥—ë–º –∫–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç (–æ–±—ã—á–Ω–æ —ç—Ç–æ –æ–¥–Ω–∞ –ø–∞–ø–∫–∞)
    root_items = os.listdir(extract_dir)
    if not root_items:
        raise RuntimeError("–ê—Ä—Ö–∏–≤ –ø—É—Å—Ç ‚Äî –Ω–µ—á–µ–≥–æ —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞—Ç—å.")

    # –ï—Å–ª–∏ –≤–Ω—É—Ç—Ä–∏ –∞—Ä—Ö–∏–≤–∞ –æ–¥–Ω–∞ –ø–∞–ø–∫–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë –∫–∞–∫ –∫–æ—Ä–µ–Ω—å
    if len(root_items) == 1:
        root_folder = os.path.join(extract_dir, root_items[0])
        if os.path.isdir(root_folder):
            project_root = os.path.join(workdir, root_items[0])

            logger.info(
                f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –≤ –∞—Ä—Ö–∏–≤–µ: '{os.path.basename(root_folder)}'. "
                "–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã..."
            )

            # –ï—Å–ª–∏ –≤ —Ä–∞–±–æ—á–µ–π –ø–∞–ø–∫–µ —É–∂–µ –µ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç —Å —Ç–µ–º –∂–µ –∏–º–µ–Ω–µ–º ‚Äî —É–¥–∞–ª—è–µ–º
            if os.path.exists(project_root):
                shutil.rmtree(project_root)

            shutil.move(root_folder, project_root)
            shutil.rmtree(extract_dir, ignore_errors=True)
            return project_root

    # –ï—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–ª–æ–∂–Ω–∞—è (—Ñ–∞–π–ª—ã/–ø–∞–ø–∫–∏ –≤–ø–µ—Ä–µ–º–µ—à–∫—É)
    logger.info("–ù–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ—Ä–Ω–µ –∞—Ä—Ö–∏–≤–∞. –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –Ω–∞–ø—Ä—è–º—É—é –≤ _workdir...")
    project_root = os.path.join(workdir, "project_manual_import")
    if os.path.exists(project_root):
        shutil.rmtree(project_root)

    os.makedirs(project_root, exist_ok=True)
    for item in root_items:
        src = os.path.join(extract_dir, item)
        dst = os.path.join(project_root, item)
        shutil.move(src, dst)

    shutil.rmtree(extract_dir, ignore_errors=True)
    return project_root


# === –ü—Ä—è–º–∞—è –æ—Ç–ª–∞–¥–∫–∞ ===
if __name__ == "__main__":
    test_archive = "./_workdir/project5059034.zip"
    test_workdir = "./_workdir"
    try:
        result = unzip_archive(test_archive, test_workdir)
        logger.info(f"‚úÖ –ü—Ä–æ–µ–∫—Ç —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω –≤: {result}")
    except Exception as e:
        logger.err(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–µ: {e}")