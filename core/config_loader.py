# -*- coding: utf-8 -*-
"""
config_loader.py ‚Äî –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ Detilda v4.9 unified
–ó–∞–≥—Ä—É–∂–∞–µ—Ç –µ–¥–∏–Ω—ã–π YAML-–∫–æ–Ω—Ñ–∏–≥ –∏–∑ –ø–∞–ø–∫–∏ config/, –∫—ç—à–∏—Ä—É–µ—Ç –µ–≥–æ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç
—Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∞–º (patterns, images, service_files).
"""

from __future__ import annotations

from pathlib import Path
from typing import Any, Dict

import yaml

from core import logger


# === –ü—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏ –∫—ç—à, —á—Ç–æ–±—ã –Ω–µ –≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ ===
_DEFAULT_SCRIPT_DIR = Path(__file__).resolve().parent.parent
_CONFIG_FILENAME = "config.yaml"
_CACHE: Dict[Path, Dict[str, Any]] = {}


# === –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ YAML ===
def _load_yaml(path: Path) -> Dict[str, Any]:
    try:
        with open(path, "r", encoding="utf-8") as f:
            data = yaml.safe_load(f) or {}
            if not isinstance(data, dict):
                logger.err(f"[config_loader] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç YAML: {path}")
                return {}
            return data
    except FileNotFoundError:
        logger.err(f"[config_loader] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
        return {}
    except Exception as e:
        logger.err(f"[config_loader] –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ YAML {path}: {e}")
        return {}


# === –ö–æ–º–ø–∏–ª—è—Ü–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ ===
def _compile_regex(cfg):
    import re
    for key, val in cfg.items():
        if isinstance(val, str):
            try:
                re.compile(val)
            except re.error:
                pass
        elif isinstance(val, list):
            for i, v in enumerate(val):
                if isinstance(v, str):
                    try:
                        re.compile(v)
                    except re.error:
                        pass
        elif isinstance(val, dict):
            _compile_regex(val)


# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def _resolve_base_dir(script_dir: str | Path | None) -> Path:
    if script_dir is None:
        return _DEFAULT_SCRIPT_DIR
    return Path(script_dir)


def _get_config(script_dir: str | Path | None, filename: str) -> Dict[str, Any]:
    base_dir = _resolve_base_dir(script_dir)
    config_path = base_dir / "config" / filename

    if config_path in _CACHE:
        return _CACHE[config_path]

    if not config_path.exists():
        logger.err(f"[config_loader] –ö–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
        return {}

    cfg = _load_yaml(config_path)
    _compile_regex(cfg)
    _CACHE[config_path] = cfg
    return cfg


# === –ü—É–±–ª–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def get_master_config(script_dir: str | Path | None = None) -> Dict[str, Any]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ config.yaml."""
    return _get_config(script_dir, _CONFIG_FILENAME)


def _get_section(script_dir: str | Path | None, section: str) -> Dict[str, Any]:
    cfg = get_master_config(script_dir)
    data = cfg.get(section, {}) if isinstance(cfg, dict) else {}
    if isinstance(data, dict):
        _compile_regex(data)
        return data
    logger.warn(f"[config_loader] –°–µ–∫—Ü–∏—è '{section}' –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
    return {}


def get_patterns_config(script_dir: str | Path | None = None) -> Dict[str, Any]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ–∫—Ü–∏—é patterns –∏–∑ config.yaml."""
    return _get_section(script_dir, "patterns")


def get_rules_images(script_dir: str | Path | None = None) -> Dict[str, Any]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ–∫—Ü–∏—é images –∏–∑ config.yaml."""
    return _get_section(script_dir, "images")


def get_rules_service_files(script_dir: str | Path | None = None) -> Dict[str, Any]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ–∫—Ü–∏—é service_files –∏–∑ config.yaml."""
    return _get_section(script_dir, "service_files")


# === –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ ===
if __name__ == "__main__":
    test_dir = Path(__file__).resolve().parent.parent
    try:
        master = get_master_config(test_dir)
        patterns = get_patterns_config(test_dir)
        images = get_rules_images(test_dir)
        service = get_rules_service_files(test_dir)

        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω:")
        logger.info(f"  ‚Ä¢ config.yaml: {len(master)} —Ä–∞–∑–¥–µ–ª–æ–≤")
        logger.info(f"  ‚Ä¢ patterns: {len(patterns)} –∫–ª—é—á–µ–π")
        logger.info(f"  ‚Ä¢ images: {len(images)} –∫–ª—é—á–µ–π")
        logger.info(f"  ‚Ä¢ service_files: {len(service)} –∫–ª—é—á–µ–π")
    except Exception as e:
        logger.err(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥–æ–≤: {e}")