# -*- coding: utf-8 -*-
"""
config_loader.py ‚Äî –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ Detilda v4.2 LTS
–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –∫—ç—à–∏—Ä—É–µ—Ç YAML/JSON –∫–æ–Ω—Ñ–∏–≥–∏ –∏–∑ –ø–∞–ø–∫–∏ config/, –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç
—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø—É—Ç–µ–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏ –∏ pathlib.Path.
"""

import os
import json
import yaml
from pathlib import Path
from core import logger


# === –ö—ç—à, —á—Ç–æ–±—ã –Ω–µ –≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ ===
_CACHE = {}


# === –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ YAML ===
def _load_yaml(path: Path):
    try:
        with open(path, "r", encoding="utf-8") as f:
            return yaml.safe_load(f)
    except FileNotFoundError:
        logger.err(f"[config_loader] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
        return {}
    except Exception as e:
        logger.err(f"[config_loader] –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ YAML {path}: {e}")
        return {}


# === –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ JSON ===
def _load_json(path: Path):
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        logger.err(f"[config_loader] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
        return {}
    except json.JSONDecodeError as e:
        logger.err(f"[config_loader] –û—à–∏–±–∫–∞ JSON-–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ {path}: {e}")
        return {}
    except Exception as e:
        logger.err(f"[config_loader] –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON {path}: {e}")
        return {}


# === –ö–æ–º–ø–∏–ª—è—Ü–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ ===
def _compile_regex(cfg):
    import re
    for key, val in cfg.items():
        if isinstance(val, str):
            try:
                re.compile(val)
            except re.error:
                pass
        elif isinstance(val, list):
            for i, v in enumerate(val):
                if isinstance(v, str):
                    try:
                        re.compile(v)
                    except re.error:
                        pass
        elif isinstance(val, dict):
            _compile_regex(val)


# === –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º ===
def _get_config(script_dir: str | Path, filename: str, is_yaml: bool = True):
    script_dir = Path(script_dir)
    config_path = script_dir / "config" / filename

    if config_path in _CACHE:
        return _CACHE[config_path]

    if not config_path.exists():
        logger.err(f"[config_loader] –ö–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
        return {}

    cfg = _load_yaml(config_path) if is_yaml else _load_json(config_path)
    _compile_regex(cfg)
    _CACHE[config_path] = cfg
    return cfg


# === –ü—É–±–ª–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def get_patterns_config(script_dir: str | Path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç patterns.yaml"""
    return _get_config(script_dir, "patterns.yaml", is_yaml=True)


def get_rules_images(script_dir: str | Path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç rules_images.json"""
    return _get_config(script_dir, "rules_images.json", is_yaml=False)


def get_rules_service_files(script_dir: str | Path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç rules_service_files.json"""
    return _get_config(script_dir, "rules_service_files.json", is_yaml=False)


# === –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ ===
if __name__ == "__main__":
    test_dir = Path(__file__).resolve().parent.parent
    try:
        patterns = get_patterns_config(test_dir)
        images = get_rules_images(test_dir)
        service = get_rules_service_files(test_dir)

        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:")
        logger.info(f"  ‚Ä¢ patterns.yaml: {len(patterns)} –∫–ª—é—á–µ–π")
        logger.info(f"  ‚Ä¢ rules_images.json: {len(images)} –∫–ª—é—á–µ–π")
        logger.info(f"  ‚Ä¢ rules_service_files.json: {len(service)} –∫–ª—é—á–µ–π")
    except Exception as e:
        logger.err(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥–æ–≤: {e}")