# -*- coding: utf-8 -*-
"""
refs.py ‚Äî –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Å—Å—ã–ª–æ–∫ –∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ Detilda v4.5 LTS unified
–¢–µ–ø–µ—Ä—å —Å–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏ –±–∏—Ç—ã—Ö —Å—Å—ã–ª–æ–∫.
"""

import re
import zipfile
from pathlib import Path
from core import logger, utils

_STATIC_DIRS = ("css/", "js/", "images/", "files/")


# === üîπ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞ ===
def unpack_archive(archive_path: Path) -> Path | None:
    """
    –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç ZIP-–∞—Ä—Ö–∏–≤ –≤ _workdir —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞.
    """
    workdir = archive_path.parent
    logger.info("üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞...")

    try:
        with zipfile.ZipFile(archive_path, "r") as zip_ref:
            root_folders = list({Path(name).parts[0] for name in zip_ref.namelist()})
            if len(root_folders) == 1:
                root_folder = root_folders[0]
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞: '{root_folder}'. –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...")
            else:
                root_folder = archive_path.stem
                logger.info(f"–ù–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä–Ω–µ–π ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è '{root_folder}'.")

            zip_ref.extractall(workdir)
            project_root = workdir / root_folder

        logger.info(f"‚Üí –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {project_root}")
        return project_root

    except Exception as e:
        logger.err(f"üí• –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ –∞—Ä—Ö–∏–≤–∞: {e}")
        return None


# === üîπ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ ===
def detect_project_root(base_dir: Path) -> Path | None:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ (–≥–¥–µ –ª–µ–∂–∞—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã HTML –∏–ª–∏ htaccess).
    """
    base_dir = Path(base_dir)
    if not base_dir.exists():
        logger.err(f"‚ö†Ô∏è –ö–∞—Ç–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω: {base_dir}")
        return None

    for p in base_dir.rglob("*"):
        if p.is_file() and (p.name.lower() in ("htaccess", ".htaccess") or p.suffix.lower() == ".html"):
            return p.parent

    logger.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ (–Ω–µ—Ç htaccess –∏–ª–∏ HTML)")
    return base_dir


# === üîπ –†–∞–∑–±–æ—Ä htaccess –º–∞—Ä—à—Ä—É—Ç–æ–≤ ===
def _parse_htaccess_routes(project_root: Path) -> dict:
    """–ß–∏—Ç–∞–µ—Ç htaccess –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç RewriteRule (alias ‚Üí —Ñ–∞–π–ª)."""
    routes = {}
    for name in [".htaccess", "htaccess"]:
        ht = project_root / name
        if ht.exists():
            try:
                text = utils.safe_read(ht)
            except Exception:
                continue

            for m in re.finditer(r"RewriteRule\s+\^([^\$\s]+)\$?\s+([^\s]+\.html)", text, re.I):
                alias, target = m.groups()
                alias = "/" + alias.strip("/")
                routes[alias] = target
                logger.debug(f"[htaccess] {alias} ‚Üí {target}")

            m = re.search(r"DirectoryIndex\s+([^\s]+\.html)", text, re.I)
            if m:
                routes["/"] = m.group(1).strip()
                logger.debug(f"[htaccess] / ‚Üí {routes['/']} (DirectoryIndex)")
            break
    return routes


# === üîπ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ —Å –ø–æ–¥—Å—á—ë—Ç–æ–º ===
def _fix_absolute_links(html_text: str, route_map: dict, rename_map: dict, project_root: Path):
    """–ú–µ–Ω—è–µ—Ç href="/xxx" –∏ src="/xxx" —Å —É—á—ë—Ç–æ–º route_map, rename_map –∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤."""
    fixed = 0
    broken = 0

    def repl(m):
        nonlocal fixed, broken
        attr, url = m.group(1), m.group(2)

        # –≤–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        if re.match(r"^https?://", url, flags=re.I):
            return m.group(0)
        if not url.startswith("/"):
            return m.group(0)

        # –º–∞—Ä—à—Ä—É—Ç—ã htaccess
        if url in route_map:
            new = route_map[url]
            if new != url:
                fixed += 1
                return f'{attr}="{new}"'

        # static: —É–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–π —Å–ª—ç—à
        for root in _STATIC_DIRS:
            if url.startswith("/" + root):
                new = url[1:]
                if new != url:
                    fixed += 1
                return f'{attr}="{new}"'

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º rename_map
        url_no_slash = url.lstrip("/")
        if url_no_slash in rename_map:
            new = rename_map[url_no_slash]
            fixed += 1
            return f'{attr}="{new}"'

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        target = project_root / url_no_slash
        if not target.exists():
            broken += 1

        return m.group(0)

    rx1 = re.compile(r'(href|src)\s*=\s*"(.*?)"', re.I)
    rx2 = re.compile(r"(href|src)\s*=\s*'(.*?)'", re.I)
    html_text = rx1.sub(repl, html_text)
    html_text = rx2.sub(repl, html_text)

    return html_text, fixed, broken


# === üîπ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø—É—Ç–µ–π –≤ /files ===
def _fix_files_relpaths(file_path: Path, html_text: str) -> str:
    """–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –ø—É—Ç–∏ –≤ /files/"""
    if "/files/" not in str(file_path.as_posix()):
        return html_text

    def fix_rel(m):
        attr, url = m.group(1), m.group(2)
        if re.match(r"^https?://", url, flags=re.I) or url.startswith("../"):
            return m.group(0)
        for root in _STATIC_DIRS:
            if url.startswith(root):
                new = "../" + url
                return f'{attr}="{new}"'
        return m.group(0)

    rx1 = re.compile(r'(href|src)\s*=\s*"(.*?)"', re.I)
    rx2 = re.compile(r"(href|src)\s*=\s*'(.*?)'", re.I)
    html_text = rx1.sub(fix_rel, html_text)
    html_text = rx2.sub(fix_rel, html_text)
    return html_text


# === üîπ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ ===
def update_all_refs_in_project(project_root: str, rename_map: dict, script_dir: str = ".") -> tuple:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ —Å—Å—ã–ª–∫–∏ –≤ HTML/CSS/JS –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:
    (fixed_links, broken_links)
    """
    root = Path(project_root)
    route_map = _parse_htaccess_routes(root)
    logger.info(f"üîó –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏–∑ htaccess: {len(route_map)}")

    fixed_total = 0
    broken_total = 0

    for path in root.rglob("*.html"):
        try:
            s = utils.safe_read(path)
        except Exception as e:
            logger.warn(f"[refs] –ü—Ä–æ–ø—É—Å–∫ {path}: {e}")
            continue

        orig = s
        s, fixed, broken = _fix_absolute_links(s, route_map, rename_map, root)
        s = _fix_files_relpaths(path, s)
        fixed_total += fixed
        broken_total += broken

        if rename_map:
            for old_rel, new_rel in rename_map.items():
                if old_rel in s:
                    s = s.replace(old_rel, new_rel)
                    fixed_total += 1

        if s != orig:
            utils.safe_write(path, s)
            logger.info(f"üîó –û–±–Ω–æ–≤–ª–µ–Ω—ã —Å—Å—ã–ª–∫–∏: {path.relative_to(root)}")

    # –æ–±–Ω–æ–≤–ª—è–µ–º CSS/JS
    if rename_map:
        for ext in (".css", ".js"):
            for path in root.rglob(f"*{ext}"):
                try:
                    s = utils.safe_read(path)
                except Exception:
                    continue
                orig = s
                for old_rel, new_rel in rename_map.items():
                    if old_rel in s:
                        s = s.replace(old_rel, new_rel)
                        fixed_total += 1
                if s != orig:
                    utils.safe_write(path, s)
                    logger.info(f"üîó –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø—É—Ç–∏ –≤ {path.relative_to(root)}")

    logger.info(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {fixed_total}, –æ—Å—Ç–∞–ª–æ—Å—å –±–∏—Ç—ã—Ö: {broken_total}")
    return fixed_total, broken_total