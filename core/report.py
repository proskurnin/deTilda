"""Report generation utilities."""
from __future__ import annotations

import time
from pathlib import Path

from core import logger, utils

__all__ = ["generate_intermediate_report", "generate_final_report"]


def _report_path(suffix: str) -> Path:
    project_name = logger.get_project_name()
    logs_dir = logger.get_logs_dir()
    return logs_dir / f"{project_name}_{suffix}.txt"


def generate_intermediate_report(
    renamed: int,
    cleaned: int,
    fixed_links: int,
    broken_links: int,
) -> None:
    report_path = _report_path("detilda_report")
    text = (
        "=== Detilda v4.5.0 LTS unified ‚Äî –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –æ—Ç—á—ë—Ç ===\n"
        f"–î–∞—Ç–∞: {time.strftime('%Y-%m-%d %H:%M:%S')}\n"
        f"{'-' * 70}\n"
        f"üñº –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –∞—Å—Å–µ—Ç–æ–≤: {renamed}\n"
        f"üßπ –û—á–∏—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {cleaned}\n"
        f"üîó –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {fixed_links}\n"
        f"üö´ –û—Å—Ç–∞–ª–æ—Å—å –±–∏—Ç—ã—Ö —Å—Å—ã–ª–æ–∫: {broken_links}\n"
        f"{'-' * 70}\n"
    )
    try:
        utils.safe_write(report_path, text)
        logger.ok(f"üßæ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {report_path.name}")
    except Exception as exc:
        logger.err(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞: {exc}")


def generate_final_report(
    project_root: Path,
    renamed_count: int,
    warnings: int,
    broken_links_fixed: int,
    broken_links_left: int,
    exec_time: float,
) -> None:
    report_path = _report_path("final_report")
    status = "‚úÖ –£—Å–ø–µ—Ö" if broken_links_left == 0 else "‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã"
    text = (
        "=== Detilda v4.5.0 LTS unified ‚Äî –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç ===\n"
        f"–ü—Ä–æ–µ–∫—Ç: {project_root.name}\n"
        f"–ü—É—Ç—å: {project_root.resolve()}\n"
        f"–î–∞—Ç–∞: {time.strftime('%Y-%m-%d %H:%M:%S')}\n"
        f"{'=' * 70}\n"
        f"üñº –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –∞—Å—Å–µ—Ç–æ–≤: {renamed_count}\n"
        f"üîó –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {broken_links_fixed}\n"
        f"üö´ –û—Å—Ç–∞–ª–æ—Å—å –±–∏—Ç—ã—Ö —Å—Å—ã–ª–æ–∫: {broken_links_left}\n"
        f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings}\n"
        f"üïì –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {exec_time:.2f} —Å–µ–∫\n"
        f"{'=' * 70}\n"
        f"{status}\n"
        f"{'=' * 70}\n"
    )
    try:
        utils.safe_write(report_path, text)
        logger.ok(f"üìä –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {report_path.name}")
    except Exception as exc:
        logger.err(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞: {exc}")
