# -*- coding: utf-8 -*-
"""
report.py ‚Äî –º–æ–¥—É–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–æ–≤ Detilda v4.5 LTS unified
–§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç—á—ë—Ç—ã –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ logs/.
"""

import time
from pathlib import Path
from core import logger, utils


# === üìò –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –æ—Ç—á—ë—Ç ===
def generate_intermediate_report(renamed: int, cleaned: int, fixed_links: int, broken_links: int):
    """
    –°–æ–∑–¥–∞—ë—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ—Å–ª–µ –∫–ª—é—á–µ–≤—ã—Ö —ç—Ç–∞–ø–æ–≤ –ø–∞–π–ø–ª–∞–π–Ω–∞.
    """
    project_name = logger.get_project_name()
    logs_dir = logger.get_logs_dir()
    report_path = logs_dir / f"{project_name}_detilda_report.txt"

    try:
        text = (
            f"=== Detilda v4.5 LTS unified ‚Äî –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –æ—Ç—á—ë—Ç ===\n"
            f"–ü—Ä–æ–µ–∫—Ç: {project_name}\n"
            f"–î–∞—Ç–∞: {time.strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"{'-'*70}\n"
            f"üñº –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –∞—Å—Å–µ—Ç–æ–≤: {renamed}\n"
            f"üßπ –û—á–∏—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {cleaned}\n"
            f"üîó –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {fixed_links}\n"
            f"üö´ –û—Å—Ç–∞–ª–æ—Å—å –±–∏—Ç—ã—Ö —Å—Å—ã–ª–æ–∫: {broken_links}\n"
            f"{'-'*70}\n"
        )
        utils.safe_write(report_path, text)
        logger.ok(f"üßæ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {report_path.name}")
    except Exception as e:
        logger.err(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞: {e}")


# === üìó –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç ===
def generate_final_report(project_root: Path, renamed_count: int, warnings: int,
                          broken_links_fixed: int, broken_links_left: int, exec_time: float):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ Detilda.
    """
    project_name = logger.get_project_name()
    logs_dir = logger.get_logs_dir()
    final_report_path = logs_dir / f"{project_name}_final_report.txt"

    try:
        status = "‚úÖ –£—Å–ø–µ—Ö" if broken_links_left == 0 else "‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ (–æ—Å—Ç–∞–ª–∏—Å—å –±–∏—Ç—ã–µ —Å—Å—ã–ª–∫–∏)"
        text = (
            f"=== Detilda v4.5 LTS unified ‚Äî –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç ===\n"
            f"–ü—Ä–æ–µ–∫—Ç: {project_name}\n"
            f"–ü—É—Ç—å: {project_root.resolve()}\n"
            f"–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {time.strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"{'='*70}\n"
            f"üñº –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –∞—Å—Å–µ—Ç–æ–≤: {renamed_count}\n"
            f"üîó –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {broken_links_fixed}\n"
            f"üö´ –û—Å—Ç–∞–ª–æ—Å—å –±–∏—Ç—ã—Ö —Å—Å—ã–ª–æ–∫: {broken_links_left}\n"
            f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings}\n"
            f"üïì –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {exec_time:.2f} —Å–µ–∫\n"
            f"{'='*70}\n"
            f"{status}\n"
            f"{'='*70}\n"
        )

        utils.safe_write(final_report_path, text)
        logger.ok(f"üìä –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {final_report_path.name}")
    except Exception as e:
        logger.err(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞: {e}")