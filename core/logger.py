# -*- coding: utf-8 -*-
"""
logger.py ‚Äî —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Detilda v4.5 LTS unified
–°–æ–∑–¥–∞—ë—Ç logs/{project_name}_detilda.log –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —É–¥–æ–±–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞.
"""

import sys
import time
from pathlib import Path

# === –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ===
_log_file = None
_project_name = None
_logs_dir = None


# === –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ ===
def _timestamp() -> str:
    return time.strftime("%Y-%m-%d %H:%M:%S")


def _write_line(level: str, message: str):
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏ –≤ –∫–æ–Ω—Å–æ–ª—å, –∏ –≤ –ª–æ–≥.
    """
    global _log_file
    line = f"{_timestamp()} {level} {message}"
    print(line)
    if _log_file:
        try:
            _log_file.write(line + "\n")
            _log_file.flush()
        except Exception:
            pass


# === –ú–µ—Ç–æ–¥—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
def info(msg: str): _write_line("‚ÑπÔ∏è", msg)
def ok(msg: str): _write_line("‚úÖ", msg)
def warn(msg: str): _write_line("‚ö†Ô∏è", msg)
def err(msg: str): _write_line("üí•", msg)
def debug(msg: str): _write_line("üêû", msg)


# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–æ–≤ ===
def attach_to_project(project_root: Path):
    """
    –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ –ø—Ä–æ–µ–∫—Ç—É.
    –°–æ–∑–¥–∞—ë—Ç logs/{project_name}_detilda.log —Ä—è–¥–æ–º —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º.
    """
    global _log_file, _project_name, _logs_dir

    _project_name = project_root.name
    base_dir = project_root.parent.parent if project_root.parent.name == "_workdir" else project_root.parent
    _logs_dir = base_dir / "logs"
    _logs_dir.mkdir(parents=True, exist_ok=True)

    log_path = _logs_dir / f"{_project_name}_detilda.log"

    try:
        _log_file = open(log_path, "a", encoding="utf-8")
        header = (
            f"\n{'=' * 80}\n"
            f"üïì {_timestamp()} ‚Äî Detilda log started for '{_project_name}'\n"
            f"{'=' * 80}\n"
        )
        _log_file.write(header)
        _log_file.flush()
        print(header, end="")
        _write_line("‚ÑπÔ∏è", f"–õ–æ–≥-—Ñ–∞–π–ª: {log_path}")
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ª–æ–≥–∞: {e}", file=sys.stderr)
        _log_file = None


def get_project_name() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞."""
    return _project_name or "detilda"


def get_logs_dir() -> Path:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –∫–∞—Ç–∞–ª–æ–≥—É –ª–æ–≥–æ–≤."""
    return _logs_dir or Path("logs")


def close():
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.
    """
    global _log_file
    if _log_file:
        try:
            footer = (
                f"{'=' * 80}\n"
                f"üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ Detilda –¥–ª—è {_project_name or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞'}\n"
                f"{'=' * 80}\n\n"
            )
            _log_file.write(footer)
            _log_file.close()
        except Exception:
            pass
        _log_file = None