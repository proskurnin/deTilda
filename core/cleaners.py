# -*- coding: utf-8 -*-
"""
cleaners.py ‚Äî –ø–æ–ª–Ω–∞—è —Ä–µ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ—Å–ª–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–∑ Tilda
Detilda v4.8 LTS
"""

import json
import os
import re
from pathlib import Path
from core import logger


# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===

def _load_rules(project_root: Path) -> dict:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–æ–≤.
    """
    rules = {"images": [], "service": []}
    try:
        img_rules = project_root / "rules_images.json"
        svc_rules = project_root / "rules_service_files.json"

        if img_rules.exists():
            rules["images"] = json.loads(img_rules.read_text(encoding="utf-8"))
            logger.info(f"‚öôÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–∞–≤–∏–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(rules['images'])}")

        if svc_rules.exists():
            rules["service"] = json.loads(svc_rules.read_text(encoding="utf-8"))
            logger.info(f"‚öôÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(rules['service'])}")

    except Exception as e:
        logger.err(f"[cleaners] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–≤–∏–ª: {e}")
    return rules


def _match_any_rule(filename: str, rules: list) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ —Å –∫–∞–∫–∏–º-–ª–∏–±–æ –ø—Ä–∞–≤–∏–ª–æ–º.
    """
    for rule in rules:
        if isinstance(rule, str):
            pattern = rule
        elif isinstance(rule, dict):
            pattern = rule.get("pattern") or rule.get("name")
        else:
            continue

        try:
            if re.search(pattern, filename, flags=re.I):
                return True
        except re.error:
            continue
    return False


def _rename_tilda_files(project_root: Path) -> dict:
    """
    –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –≤–∏–¥–∞ til* ‚Üí ai*.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –º–∞–ø–ø–∏–Ω–≥–∞ {—Å—Ç–∞—Ä–æ–µ: –Ω–æ–≤–æ–µ}.
    """
    rename_map = {}
    for file in project_root.rglob("*"):
        if not file.is_file():
            continue
        if file.name.startswith("til"):
            new_name = "ai" + file.name[3:]
            new_path = file.with_name(new_name)
            try:
                file.rename(new_path)
                rename_map[file.name] = new_name
                logger.info(f"üß© –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: {file.name} ‚Üí {new_name}")
            except Exception as e:
                logger.err(f"[cleaners] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è {file}: {e}")
    return rename_map


def _update_links_in_file(file_path: Path, rename_map: dict) -> bool:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ —Å—Å—ã–ª–∫–∏ –≤ —Ñ–∞–π–ª–µ –ø–æ –∫–∞—Ä—Ç–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è.
    """
    ext = file_path.suffix.lower()
    if ext not in [".html", ".htm", ".css", ".js", ".json", ".txt", ".svg", ".md"]:
        return False

    try:
        text = file_path.read_text(encoding="utf-8", errors="ignore")
    except Exception as e:
        logger.err(f"[cleaners] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
        return False

    orig = text
    for old, new in rename_map.items():
        text = text.replace(old, new)

    if text != orig:
        try:
            file_path.write_text(text, encoding="utf-8")
            logger.info(f"üîó –û–±–Ω–æ–≤–ª–µ–Ω—ã —Å—Å—ã–ª–∫–∏: {file_path.relative_to(file_path.parents[2])}")
            return True
        except Exception as e:
            logger.err(f"[cleaners] –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ {file_path}: {e}")
    return False


def _remove_files_by_rules(project_root: Path, rules: dict) -> int:
    """
    –£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª—ã, –ø–æ–¥–ø–∞–¥–∞—é—â–∏–µ –ø–æ–¥ –ø—Ä–∞–≤–∏–ª–∞.
    """
    removed = 0
    for file in project_root.rglob("*"):
        if not file.is_file():
            continue
        if _match_any_rule(file.name, rules["images"]) or _match_any_rule(file.name, rules["service"]):
            try:
                os.remove(file)
                removed += 1
                logger.info(f"üóë –£–¥–∞–ª—ë–Ω –ø–æ –ø—Ä–∞–≤–∏–ª—É: {file.name}")
            except Exception as e:
                logger.err(f"[cleaners] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {file}: {e}")
    return removed


# === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===

def clean_project_files(project_root: Path) -> int:
    """
    –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ—á–∏—Å—Ç–∫–∏ –∏ —Ä–µ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:
    1. –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–≤–∏–ª —É–¥–∞–ª–µ–Ω–∏—è.
    2. –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.
    3. –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ til* ‚Üí ai*.
    4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –≤–æ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–∞—Ö.
    5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –º–∞–ø–ø–∏–Ω–≥–∞ (rename_map.json).
    """
    if not project_root.exists():
        logger.err(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ {project_root} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return 0

    logger.info("üßπ –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –∏ —Ä–µ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞...")

    # 1Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–≤–∏–ª
    rules = _load_rules(project_root)

    # 2Ô∏è‚É£ –£–¥–∞–ª–µ–Ω–∏–µ –º—É—Å–æ—Ä–∞
    removed_count = _remove_files_by_rules(project_root, rules)

    # 3Ô∏è‚É£ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    rename_map = _rename_tilda_files(project_root)

    # 4Ô∏è‚É£ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫
    changed_files = 0
    for file in project_root.rglob("*"):
        if _update_links_in_file(file, rename_map):
            changed_files += 1

    # 5Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
    try:
        rename_map_path = project_root / "rename_map.json"
        rename_map_path.write_text(
            json.dumps(rename_map, ensure_ascii=False, indent=2),
            encoding="utf-8"
        )
        logger.ok(f"üíæ –¢–∞–±–ª–∏—Ü–∞ –º–∞–ø–ø–∏–Ω–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: rename_map.json ({len(rename_map)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
    except Exception as e:
        logger.err(f"[cleaners] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è rename_map.json: {e}")

    total_changed = changed_files + removed_count
    logger.ok(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ {removed_count}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ {changed_files} —Ñ–∞–π–ª–æ–≤.")
    return total_changed