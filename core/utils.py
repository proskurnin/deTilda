# -*- coding: utf-8 -*-
"""
utils.py ‚Äî —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã Detilda v4.4 LTS
–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ, –∑–∞–ø–∏—Å—å, —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.
"""

import os
import io
import json
import time
from pathlib import Path
from core import logger


# === –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ ===
def safe_read(path: str) -> str:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ —á–∏—Ç–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–¥–∏—Ä–æ–≤–∫—É (utf-8 / utf-8-sig).
    """
    path = Path(path)
    if not path.exists():
        raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")

    try:
        with io.open(path, "r", encoding="utf-8") as f:
            return f.read()
    except UnicodeDecodeError:
        with io.open(path, "r", encoding="utf-8-sig") as f:
            return f.read()
    except Exception as e:
        logger.err(f"[utils.safe_read] –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {path}: {e}")
        return ""


# === –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞ ===
def safe_write(path: str, content: str):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –≤—Å–µ—Ö –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π.
    """
    path = Path(path)
    try:
        path.parent.mkdir(parents=True, exist_ok=True)
        with io.open(path, "w", encoding="utf-8", newline="\n") as f:
            f.write(content)
    except Exception as e:
        logger.err(f"[utils.safe_write] –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ {path}: {e}")
        raise


# === –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ ===
def safe_copy(src: str, dst: str):
    """
    –ö–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª —Å –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å—é –∏ –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ç–∞–ª–æ–≥–æ–≤.
    """
    import shutil
    src = Path(src)
    dst = Path(dst)
    try:
        dst.parent.mkdir(parents=True, exist_ok=True)
        shutil.copy2(src, dst)
        logger.info(f"üìÑ –ö–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {dst.name}")
    except Exception as e:
        logger.err(f"[utils.safe_copy] –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è {src} ‚Üí {dst}: {e}")


# === –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–∞ ===
def clear_file(path: str):
    """
    –û—á–∏—â–∞–µ—Ç —Ñ–∞–π–ª, –æ—Å—Ç–∞–≤–ª—è—è –µ–≥–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º (–ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –ª–æ–≥–æ–≤ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤).
    """
    try:
        Path(path).write_text("", encoding="utf-8")
        logger.info(f"üßπ –û—á–∏—â–µ–Ω —Ñ–∞–π–ª: {path}")
    except Exception as e:
        logger.err(f"[utils.clear_file] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ {path}: {e}")


# === –ü–æ–¥—Å—á—ë—Ç —Å—Ç—Ä–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ ===
def count_lines(text: str) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ."""
    return text.count("\n") + 1 if text else 0


# === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ ===
def file_exists(path: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª."""
    return Path(path).exists()


# === –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ ===
def safe_delete(path: str):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    path = Path(path)
    try:
        if path.exists():
            path.unlink()
            logger.info(f"üóë –£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª: {path}")
    except Exception as e:
        logger.err(f"[utils.safe_delete] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {path}: {e}")


# === –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏ ===
def relpath(path: str, base: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ base, —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏.
    """
    try:
        return str(Path(path).resolve().relative_to(Path(base).resolve())).replace("\\", "/")
    except Exception:
        return str(path).replace("\\", "/")


# === –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ ===
def ensure_dir(path: str):
    """–°–æ–∑–¥–∞—ë—Ç –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç."""
    try:
        Path(path).mkdir(parents=True, exist_ok=True)
    except Exception as e:
        logger.err(f"[utils.ensure_dir] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ {path}: {e}")


# === –ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ===
def list_files_recursive(base_dir: str, extensions=None) -> list:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ).
    extensions ‚Äî —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: ['.html', '.js'])
    """
    base_dir = Path(base_dir)
    files = []
    for p in base_dir.rglob("*"):
        if p.is_file() and (not extensions or p.suffix.lower() in extensions):
            files.append(str(p))
    return files


# === –ù–æ–≤—ã–π –±–ª–æ–∫: —á—Ç–µ–Ω–∏–µ manifest.json ===
def load_manifest() -> dict:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç manifest.json –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∫–∞–∫ dict.
    –ï—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å.
    """
    manifest_path = Path(__file__).resolve().parents[1] / "manifest.json"

    if not manifest_path.exists():
        logger.warn(f"‚ö†Ô∏è manifest.json –Ω–µ –Ω–∞–π–¥–µ–Ω: {manifest_path}")
        return {}

    try:
        with open(manifest_path, "r", encoding="utf-8") as f:
            manifest = json.load(f)
            logger.info(f"üìÑ Manifest –∑–∞–≥—Ä—É–∂–µ–Ω: –≤–µ—Ä—Å–∏—è {manifest.get('version', 'unknown')}")
            return manifest
    except Exception as e:
        logger.err(f"[utils.load_manifest] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è manifest.json: {e}")
        return {}


# === –ù–æ–≤—ã–π –±–ª–æ–∫: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ===
def get_elapsed_time(start_time: float) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:
    1.23s, 12.5s, 1m 03s, 2m 41s
    """
    elapsed = time.time() - start_time
    if elapsed < 60:
        return f"{elapsed:.2f}s"
    minutes, seconds = divmod(int(elapsed), 60)
    return f"{minutes}m {seconds:02d}s"


# === –ü—Ä—è–º–∞—è –æ—Ç–ª–∞–¥–∫–∞ ===
if __name__ == "__main__":
    test_file = "./_workdir/test_output.txt"
    try:
        safe_write(test_file, "Test OK ‚úÖ")
        text = safe_read(test_file)
        logger.info(f"–ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: {text.strip()}")
        clear_file(test_file)
        safe_delete(test_file)
    except Exception as e:
        logger.err(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ utils.py: {e}")