# -*- coding: utf-8 -*-
"""
main.py ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø–∞–π–ø–ª–∞–π–Ω–∞ Detilda v4.5 LTS unified
–û—Ä–∫–µ—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å: —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞, –æ—á–∏—Å—Ç–∫–∞, –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç—á—ë—Ç.
"""

import time
from pathlib import Path
from core import (
    logger,
    assets,
    cleaners,
    forms,
    inject,
    report,
    refs,
)
from core.utils import ensure_dir


def main():
    start_time = time.time()
    version = "v4.5 LTS unified"

    # === 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
    workdir = Path("./_workdir")
    ensure_dir(workdir)
    print(f"=== Detilda {version} ===")
    print(f"–†–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞: {workdir.resolve()}")
    print(f"–î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞: {time.strftime('%Y-%m-%d %H:%M:%S')}")

    # === 2. –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
    archive_name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞—Ä—Ö–∏–≤–∞ –≤ –ø–∞–ø–∫–µ ./_workdir (–Ω–∞–ø—Ä–∏–º–µ—Ä, projectXXXX.zip): ").strip()
    email = input("–í–≤–µ–¥–∏—Ç–µ e-mail –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é r@prororo.com): ").strip() or "r@prororo.com"

    if not archive_name:
        print("‚ùå –ò–º—è –∞—Ä—Ö–∏–≤–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ ‚Äî –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        return

    archive_path = workdir / archive_name
    if not archive_path.exists():
        print(f"‚ùå –ê—Ä—Ö–∏–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {archive_path}")
        return

    # === 3. –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞ ===
    project_root = refs.unpack_archive(archive_path)
    if not project_root:
        print("üí• –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ –∞—Ä—Ö–∏–≤–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
        return

    # === 4. –ü—Ä–∏–≤—è–∑–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ ===
    logger.attach_to_project(project_root)
    logger.info(f"=== Detilda {version} ===")
    logger.info(f"–†–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞: {workdir.resolve()}")
    logger.info(f"–î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞: {time.strftime('%Y-%m-%d %H:%M:%S')}")
    logger.info(f"‚Üí –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–¥—Ä–µ—Å: {email}")

    # === 5. –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏ –æ—á–∏—Å—Ç–∫–∞ –∞—Å—Å–µ—Ç–æ–≤ ===
    logger.info("üñº –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏ –æ—á–∏—Å—Ç–∫–∞ –∞—Å—Å–µ—Ç–æ–≤...")
    stats = {}
    rename_map, stats = assets.rename_and_cleanup_assets(project_root, stats)

    renamed_count = stats.get("renamed", 0)
    removed_count = stats.get("removed", 0)
    logger.info(f"üñº –ê—Å—Å–µ—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã: –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ {renamed_count}, —É–¥–∞–ª–µ–Ω–æ {removed_count}")

    report.generate_intermediate_report(
        renamed=renamed_count,
        cleaned=0,
        fixed_links=0,
        broken_links=0
    )

    # === 6. –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ ===
    logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞...")
    cleaned_count = cleaners.clean_project_files(project_root)
    logger.info(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {cleaned_count}")

    report.generate_intermediate_report(
        renamed=renamed_count,
        cleaned=cleaned_count,
        fixed_links=0,
        broken_links=0
    )

    # === 7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è send_email.php ===
    logger.info("üì¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è send_email.php...")
    try:
        forms.generate_send_email_php(project_root, email)
        logger.ok("üì© send_email.php —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")
    except Exception as e:
        logger.err(f"üí• –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ send_email.php: {e}")

    # === 8. –í–Ω–µ–¥—Ä–µ–Ω–∏–µ form-handler.js ===
    logger.info("üß© –í–Ω–µ–¥—Ä–µ–Ω–∏–µ form-handler.js –∏ AIDA forms...")
    try:
        inject.inject_form_scripts(project_root)
        logger.ok("‚úÖ –í–Ω–µ–¥—Ä–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
    except Exception as e:
        logger.err(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤: {e}")

    # === 9. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –≤ –ø—Ä–æ–µ–∫—Ç–µ ===
    logger.info("üîó –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –≤ –ø—Ä–æ–µ–∫—Ç–µ...")
    try:
        fixed_links, broken_links = refs.update_all_refs_in_project(project_root, rename_map)
        logger.ok(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {fixed_links}, –æ—Å—Ç–∞–ª–æ—Å—å –±–∏—Ç—ã—Ö: {broken_links}")
    except Exception as e:
        logger.err(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–æ–∫: {e}")
        fixed_links, broken_links = 0, 0

    report.generate_intermediate_report(
        renamed=renamed_count,
        cleaned=cleaned_count,
        fixed_links=fixed_links,
        broken_links=broken_links
    )

    # === 10. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ===
    warnings = 0  # –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞

    # === 11. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç ===
    exec_time = round(time.time() - start_time, 2)
    logger.info("üìä –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞...")
    report.generate_final_report(
        project_root=project_root,
        renamed_count=renamed_count,
        warnings=warnings,
        broken_links_fixed=fixed_links,
        broken_links_left=broken_links,
        exec_time=exec_time,
    )

    # === 12. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ ===
    logger.info("======================================")
    logger.info(f"üéØ  Detilda {version} ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    logger.info(f"üì¶ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –∞—Å—Å–µ—Ç–æ–≤: {renamed_count}")
    logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {cleaned_count}")
    logger.info(f"üîó –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {fixed_links} / –û—Å—Ç–∞–ª–æ—Å—å –±–∏—Ç—ã—Ö: {broken_links}")
    logger.info(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings}")
    logger.info(f"üïì –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {exec_time} —Å–µ–∫")
    logger.info("======================================")
    logger.ok(f"üéØ Detilda {version} ‚Äî –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.")
    logger.close()


if __name__ == "__main__":
    main()