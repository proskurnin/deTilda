# -*- coding: utf-8 -*-
"""CLI entry point for the refactored Detilda pipeline."""

from __future__ import annotations

from pathlib import Path

from core.pipeline import DetildaPipeline
from core.utils import ensure_dir


def main() -> None:
    version = "v5.0 refactored"
    pipeline = DetildaPipeline(version)

    workdir = Path("./_workdir")
    ensure_dir(workdir)

    print(f"=== Detilda {version} ===")
    print(f"–†–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞: {workdir.resolve()}")

    archive_name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞—Ä—Ö–∏–≤–∞ –≤ ./_workdir (–Ω–∞–ø—Ä–∏–º–µ—Ä, projectXXXX.zip): ").strip()
    email = input("–í–≤–µ–¥–∏—Ç–µ e-mail –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é r@prororo.com): ").strip() or "r@prororo.com"

    if not archive_name:
        print("‚ùå –ò–º—è –∞—Ä—Ö–∏–≤–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ ‚Äî –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        return

    archive_path = workdir / archive_name
    if not archive_path.exists():
        print(f"‚ùå –ê—Ä—Ö–∏–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {archive_path}")
        return

    try:
        pipeline.run(archive_path, email)
    except Exception as exc:
        print(f"üí• –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {exc}")


if __name__ == "__main__":
    main()
