# Регулярные выражения и правила для обработки контента

# 1. Паттерны для поиска ссылок
links:
  # Используем одинарные кавычки, чтобы YAML не интерпретировал спецсимволы
  - '(?i)\b(?:src|href|action)\s*=\s*["''](?P<link>[^"'']+)["'']'
  - '(?i)\burl\((["'']?)(?P<link>[^) "'']+)\1\)'
  - '(?i)\bsrcset\s*=\s*["''](?P<link>[^"'']+)["'']'
  - '(?i)\bdata-src\s*=\s*["''](?P<link>[^"'']+)["'']'

# 2. Правила для общей замены текста
replace_rules:
  - pattern: '(?i)\btil'
    replacement: 'ai'

# 3. Правила для комментирования определенных ссылок (пусто, т.к. делаем в rules_images)
comment_rules: []

# 4. Префиксы ссылок для игнорирования
ignore_prefixes:
  - 'http://'
  - 'https://'
  - '//'
  - 'data:'
  - 'mailto:'
  - 'tel:'
  - '#'

# 5. Паттерны для очистки robots.txt
robots_cleanup_patterns:
  - '(?im)^\s*Disallow:\s*/tilda/(?:form|rec|click|scroll|popup|cart|product|event).*\n?'
  - '(?im)^\s*Disallow:\s*/\*_escaped_fragment_\*/\s*\n?'

# 6. Паттерны для очистки readme.txt
readme_cleanup_patterns:
  # Правило для удаления строки
  - '(?im)^.*Published on Tilda\.cc.*\n?'
  # Правило для замены 'tilda' на 'site'
  - pattern: '(?i)\btilda\b'
    replacement: 'site'

# 7. Паттерны для парсинга htaccess
htaccess_patterns:
  rewrite_rule: '(?im)^[ \t]*RewriteRule[ \t]+\^/?([a-z0-9\-\_\/]+)\??\$[ \t]+([^\s\[]+)'
  redirect: '(?im)^[ \t]*Redirect(?:Permanent|[ \t]+3\d{2})?[ \t]+(/[^\s]+)[ \t]+([^\s]+)'

# 8. Паттерн для переименования файлов (assets.py)
assets:
  til_to_ai_filename: '\btil'  # \b в начале, (?i) добавляется в коде

# 9. Паттерны для поиска остаточных URL Tilda (checker.py)
tilda_remnants_patterns:
  - '(https?://|//)[^\s''"]*tilda\.ws[^\s''"]*'
  - '(https?://|//)[^\s''"]*tildacdn\.com[^\s''"]*'
  - '(https?://|//)[^\s''"]*tildaapi\.com[^\s''"]*'